{
	"ngrx-crud-effects": {
		"prefix": "ngrx-crud-effects",
		"body": [
			"import { all${1:UpperCaseEntity}sLoadedSelector, State } from '../selectors/${2:LowerCaseEntity}.selectors';",
			"import * as actionTypes from '../actions/${2:LowerCaseEntity}.action-types';",
			"import * as ${2:LowerCaseEntity}Actions from '../actions/${2:LowerCaseEntity}.actions';",
			"",
			"@Injectable()",
			"export class ${1:UpperCaseEntity}Effects {",
			"",
			"  constructor(private ${2:LowerCaseEntity}Service: ${1:UpperCaseEntity}Service,",
			"              private actions$: Actions,",
			"              private store: Store<State>) { }",
			"",
			"  @Effect()",
			"  load${1:UpperCaseEntity}s$: Observable<Action> = this.actions$.pipe(",
			"    ofType(actionTypes.${1:UpperCaseEntity}Actions.Load),",
			"    withLatestFrom(this.store.pipe(select(all${1:UpperCaseEntity}sLoadedSelector))),",
			"    filter(([action, all${1:UpperCaseEntity}sLoaded]) => !all${1:UpperCaseEntity}sLoaded),",
			"    mergeMap(action =>",
			"      this.${2:LowerCaseEntity}Service.getAll().pipe(",
			"        map(${2:LowerCaseEntity}s => (${2:LowerCaseEntity}Actions.LoadSuccess({${2:LowerCaseEntity}s}))),",
			"        catchError(err => of(${2:LowerCaseEntity}Actions.LoadFail(err)))",
			"      )",
			"    )",
			"  );",
			"",
			"  @Effect()",
			"  update${1:UpperCaseEntity}$: Observable<Action> = this.actions$.pipe(",
			"    ofType(actionTypes.${1:UpperCaseEntity}Actions.Update${1:UpperCaseEntity}),",
			"    map((action) => action.${2:LowerCaseEntity}),",
			"    mergeMap((p: ${1:UpperCaseEntity}) =>",
			"      this.${2:LowerCaseEntity}Service.put(p).pipe(",
			"        map(updated${1:UpperCaseEntity} => (${2:LowerCaseEntity}Actions.Update${1:UpperCaseEntity}Success({",
			"          updated${1:UpperCaseEntity}: {",
			"            id: updated${1:UpperCaseEntity}.id, changes: updated${1:UpperCaseEntity}",
			"          }",
			"        }))),",
			"        catchError(err => of(${2:LowerCaseEntity}Actions.Update${1:UpperCaseEntity}Fail(err)))",
			"      )",
			"    )",
			"  );",
			"",
			"  @Effect()",
			"  create${1:UpperCaseEntity}$: Observable<Action> = this.actions$.pipe(",
			"    ofType(actionTypes.${1:UpperCaseEntity}Actions.Create${1:UpperCaseEntity}),",
			"    map((action) => action.${2:LowerCaseEntity}),",
			"    mergeMap((${2:LowerCaseEntity}: ${1:UpperCaseEntity}) =>",
			"      this.${2:LowerCaseEntity}Service.post(${2:LowerCaseEntity}).pipe(",
			"        map(new${1:UpperCaseEntity} => (${2:LowerCaseEntity}Actions.Create${1:UpperCaseEntity}Success({new${1:UpperCaseEntity}}))),",
			"        catchError(err => of(${2:LowerCaseEntity}Actions.Create${1:UpperCaseEntity}Fail(err)))",
			"      )",
			"    )",
			"  );",
			"",
			"  @Effect()",
			"  delete${1:UpperCaseEntity}$: Observable<Action> = this.actions$.pipe(",
			"    ofType(actionTypes.${1:UpperCaseEntity}Actions.Delete${1:UpperCaseEntity}),",
			"    map((action) => action.id),",
			"    mergeMap((${2:LowerCaseEntity}Id: number) =>",
			"      this.${2:LowerCaseEntity}Service.delete(${2:LowerCaseEntity}Id).pipe(",
			"        map(() => (${2:LowerCaseEntity}Actions.Delete${1:UpperCaseEntity}Success({${2:LowerCaseEntity}Id}))),",
			"        catchError(err => of(${2:LowerCaseEntity}Actions.Delete${1:UpperCaseEntity}Fail(err)))",
			"      )",
			"    )",
			"  );",
			"}",
			""
		],
		"description": "The complete CRUD effects stubbed out."
	},
	"ngrx-crud-actions": {
		"prefix": "ngrx-crud-actions",
		"body": [
			"",
			"export const SetCurrent${1:UpperCaseEntity} = createAction('[${1:UpperCaseEntity}] Set Current ${1:UpperCaseEntity}', props<{${2:LowerCaseEntity}: ${1:UpperCaseEntity}}>());",
			"",
			"export const ClearCurrent${1:UpperCaseEntity} = createAction('[${1:UpperCaseEntity}] Clear Current ${1:UpperCaseEntity}');",
			"",
			"export const InitializeCurrent${1:UpperCaseEntity} = createAction('[${1:UpperCaseEntity}] Initialize Current ${1:UpperCaseEntity}');",
			"",
			"",
			"export const Load = createAction('[${1:UpperCaseEntity}] Load');",
			"",
			"export const LoadSuccess = createAction('[${1:UpperCaseEntity}] Load Success', props<{${2:LowerCaseEntity}s: ${1:UpperCaseEntity}[]}>());",
			"",
			"export const LoadFail = createAction('[${1:UpperCaseEntity}] Load Fail', props<{error: string}>());",
			"",
			"",
			"export const Update${1:UpperCaseEntity} = createAction('[${1:UpperCaseEntity}] Update ${1:UpperCaseEntity}', props<{${2:LowerCaseEntity}: ${1:UpperCaseEntity}}>());",
			"",
			"export const Update${1:UpperCaseEntity}Success = createAction('[${1:UpperCaseEntity}] Update ${1:UpperCaseEntity} Success', props<{updated${1:UpperCaseEntity}: Update<${1:UpperCaseEntity}>}>());",
			"",
			"export const Update${1:UpperCaseEntity}Fail = createAction('[${1:UpperCaseEntity}] Update ${1:UpperCaseEntity} Fail', props<{error: string}>());",
			"",
			"",
			"export const Create${1:UpperCaseEntity} = createAction('[${1:UpperCaseEntity}] Create ${1:UpperCaseEntity}', props<{${2:LowerCaseEntity}: ${1:UpperCaseEntity}}>());",
			"",
			"export const Create${1:UpperCaseEntity}Success = createAction('[${1:UpperCaseEntity}] Create ${1:UpperCaseEntity} Success', props<{new${1:UpperCaseEntity}: ${1:UpperCaseEntity}}>());",
			"",
			"export const Create${1:UpperCaseEntity}Fail = createAction('[${1:UpperCaseEntity}] Create ${1:UpperCaseEntity} Fail', props<{error: string}>());",
			"",
			"",
			"export const Delete${1:UpperCaseEntity} = createAction('[${1:UpperCaseEntity}] Delete ${1:UpperCaseEntity}', props<{id: number}>());",
			"",
			"export const Delete${1:UpperCaseEntity}Success = createAction('[${1:UpperCaseEntity}] Delete ${1:UpperCaseEntity} Success', props<{${2:LowerCaseEntity}Id: number}>());",
			"",
			"export const Delete${1:UpperCaseEntity}Fail = createAction('[${1:UpperCaseEntity}] Delete ${1:UpperCaseEntity} Fail', props<{error: string}>());",
			""
		],
		"description": "The Ngrx CRUD actions."
	},
	"ngrx-crud-reducer": {
		"prefix": "ngrx-crud-reducer",
		"body": [
			"// State for this feature (${1:UpperCaseEntity})",
			"export interface ${1:UpperCaseEntity}State extends EntityState<${1:UpperCaseEntity}> {",
			"  current${1:UpperCaseEntity}Id: number | null;",
			"  error: string;",
			"  all${1:UpperCaseEntity}sLoaded: boolean;",
			"}",
			"",
			"export const adapter = createEntityAdapter<${1:UpperCaseEntity}>();",
			"",
			"export const initialState = adapter.getInitialState({",
			"  current${1:UpperCaseEntity}Id: null,",
			"  error: '',",
			"  all${1:UpperCaseEntity}sLoaded: false",
			"});",
			"",
			"const ${1:UpperCaseEntity}Reducer = createReducer(",
			"  initialState,",
			"  on(${1:UpperCaseEntity}Actions.SetCurrent${1:UpperCaseEntity}, (state, action) => ({ ...state, current${1:UpperCaseEntity}Id: action.${2:LowerCaseEntity}.id })),",
			"  on(${1:UpperCaseEntity}Actions.ClearCurrent${1:UpperCaseEntity}, (state) => ({ ...state, current${1:UpperCaseEntity}Id: null })),",
			"  on(${1:UpperCaseEntity}Actions.InitializeCurrent${1:UpperCaseEntity}, (state) => ({ ...state, current${1:UpperCaseEntity}Id: 0 })),",
			"  on(${1:UpperCaseEntity}Actions.LoadSuccess, (state, {${2:LowerCaseEntity}s}) =>  adapter.addMany(${2:LowerCaseEntity}s, { ...state, all${1:UpperCaseEntity}sLoaded: true })),",
			"  on(${1:UpperCaseEntity}Actions.LoadFail, (state, action) => ({ ...state, ${2:LowerCaseEntity}s: [], error: action.error })),",
			"  on(${1:UpperCaseEntity}Actions.Update${1:UpperCaseEntity}Success, (state, {updated${1:UpperCaseEntity}}) => adapter.updateOne(updated${1:UpperCaseEntity}, state)),",
			"  on(${1:UpperCaseEntity}Actions.Update${1:UpperCaseEntity}Fail, (state, action) => ({ ...state, ${2:LowerCaseEntity}: [], error: action.error})),",
			"  on(${1:UpperCaseEntity}Actions.Create${1:UpperCaseEntity}Success, (state, action) => adapter.addOne(action.new${1:UpperCaseEntity}, state)),",
			"  on(${1:UpperCaseEntity}Actions.Create${1:UpperCaseEntity}Fail, (state, action) => ({ ...state, error: action.error })),",
			"  on(${1:UpperCaseEntity}Actions.Delete${1:UpperCaseEntity}Success, (state, action) => adapter.removeOne(action.${2:LowerCaseEntity}Id, state)),",
			"  on(${1:UpperCaseEntity}Actions.Delete${1:UpperCaseEntity}Fail, (state, action) => ({ ...state, error: action.error }))",
			"",
			");",
			"",
			"export function ${2:LowerCaseEntity}Reducer(state = initialState, action: Action) {",
			"  return ${1:UpperCaseEntity}Reducer(state, action);",
			"}",
			"",
			"export const getSelected${1:UpperCaseEntity}Id = (state: ${1:UpperCaseEntity}State) => state.current${1:UpperCaseEntity}Id;",
			"",
			"// get the selectors",
			"const {",
			"  selectIds,",
			"  selectEntities,",
			"  selectAll,",
			"  selectTotal,",
			"} = adapter.getSelectors();",
			"",
			"// select the array of ${1:UpperCaseEntity} ids",
			"export const select${1:UpperCaseEntity}Ids = selectIds;",
			"",
			"// select the dictionary of ${1:UpperCaseEntity} entities",
			"export const select${1:UpperCaseEntity}Entities = selectEntities;",
			"",
			"// select the array of ${1:UpperCaseEntity}s",
			"export const selectAll${1:UpperCaseEntity}s = selectAll;",
			"",
			"// select the total ${1:UpperCaseEntity} count",
			"export const select${1:UpperCaseEntity}Total = selectTotal;",
			""
		],
		"description": "The Ngrx CRUD reducer functions."
	},
	"ngrx-crud-selectors": {
		"prefix": "ngrx-crud-selectors",
		"body": [
			"import { createFeatureSelector, createSelector } from '@ngrx/store';",
			"import * as from${1:UpperCaseEntity}s from './${2:LowerCaseEntity}.reducer';",
			"import * as fromRoot from '../../state/app.state';",
			"",
			"export interface State extends fromRoot.AppState {",
			"  ${2:LowerCaseEntity}s: from${1:UpperCaseEntity}s.${1:UpperCaseEntity}State;",
			"}",
			"",
			"// Selector functions",
			"const select${1:UpperCaseEntity}sState = createFeatureSelector<from${1:UpperCaseEntity}s.${1:UpperCaseEntity}State>('${2:LowerCaseEntity}s');",
			"",
			"export const getCurrent${1:UpperCaseEntity}Id = createSelector(",
			"    select${1:UpperCaseEntity}sState,",
			"    state => state.current${1:UpperCaseEntity}Id",
			");",
			"",
			"export const getCurrent${1:UpperCaseEntity} = createSelector(",
			"    select${1:UpperCaseEntity}sState,",
			"    getCurrent${1:UpperCaseEntity}Id,",
			"    (${2:LowerCaseEntity}State, current${1:UpperCaseEntity}Id) => {",
			"      if (current${1:UpperCaseEntity}Id === 0) {",
			"        return {",
			"          id: 0,",
			"          ${2:LowerCaseEntity}Name: '',",
			"        };",
			"      } else {",
			"        return current${1:UpperCaseEntity}Id ? ${2:LowerCaseEntity}State.entities[current${1:UpperCaseEntity}Id] : null;",
			"      }",
			"    }",
			");",
			"",
			"export const get${1:UpperCaseEntity}s = createSelector(",
			"    select${1:UpperCaseEntity}sState,",
			"    from${1:UpperCaseEntity}s.selectAll${1:UpperCaseEntity}s",
			");",
			"",
			"export const getError = createSelector(",
			"    select${1:UpperCaseEntity}sState,",
			"    state => state.error",
			");",
			"",
			"export const all${1:UpperCaseEntity}sLoadedSelector = createSelector(",
			"  select${1:UpperCaseEntity}sState,",
			"  state => state.all${1:UpperCaseEntity}sLoaded",
			");",
			""
		],
		"description": "Ngrx crud selectors"
	},
	"Jasmine Empty Describe": {
		"prefix": "jdescribe",
		"body": [
			"describe('${0}', () => {",
			"",
			"});"
		],
		"description": "Empty Jasmine Describe definition"
	},
	"Jasmine Describe with it": {
		"prefix": "jdescribe-with-it",
		"body": [
			"describe('${0}', () => {",
			"    it('', () => {",
			"    ",
			"    });",
			"});"
		]
	},
	"Jasmine It": {
		"prefix": "jit",
		"body": [
			"it('${0}', () => {",
			"  ",
			"});"
		]
	},
	"Jasmine Describe with BeforeEach": {
		"prefix": "jdescribe-with-before-each",
		"body": [
			"import { TestBed } from '@angular/core/testing';",
			"",
			"describe('${0}', () => {",
			"",
			"    beforeEach(() => {",
			"        TestBed.configureTestingModule({",
			"            declarations: [],",
			"            imports: [],",
			"            providers: []",
			"        });",
			"    });",
			"",
			"    it('', () => {",
			"",
			"    });",
			"});"
		],
		"description": "Jasmine Describe with before each helper."
	}
}